* Bootstrapping
Let's start by making sure we have MELPA stable, which is a
requirement for a lot that follows.

Code comes from http://melpa.org/#/getting-started.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (setq package-archive-priorities '(("melpa" . 0) ("melpa-stable" . 1)))
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)
#+END_SRC

* Tangling-related

We need to add some functions to make dealing with this file easier.

This part is partially taken from
https://jamiecollinson.com/blog/my-emacs-config/#make-it-easy-to-edit-this-file.

#+BEGIN_SRC emacs-lisp
  (defun ash/tangle-config ()
    "Tangle the config file to a standard config file."
    (interactive)
    (org-babel-tangle 0 "~/.emacs.d/init.el"))

  (defun ash/find-config ()
    "Edit config.org"
    (interactive)
    (find-file "~/.emacs.d/emacs.org")
    (local-set-key (kbd "C-c T") 'ash/tangle-config))

  (global-set-key (kbd "C-c I") 'ash/find-config)
#+END_SRC

* Better defaults

Most of this is taken from
https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#bootstrap.

I also prefer a minimal UI.
#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0)                           ; Disable the cursor blinking
  (scroll-bar-mode 0)                             ; Disable the scroll bar
  (tool-bar-mode 0)                               ; Disable the tool bar
  (tooltip-mode 0))                               ; Disable the tooltips
#+END_SRC

Various better variable defaults & other basic defaults, mostly from
the same file.

#+BEGIN_SRC emacs-lisp
  (setq-default
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   auto-window-vscroll nil                          ; Lighten vertical scroll
   confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   column-number-mode t                             ; Useful to look out for line length limits
   delete-by-moving-to-trash t                      ; Delete files to trash
   display-time-default-load-average nil            ; Don't display load average
   display-time-format "%H:%M"                      ; Format the time string
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode nil                             ; Stop using tabs to indent
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   left-margin-width 1 right-margin-width 1         ; Add left and right margins
   mouse-yank-at-point t                            ; Yank at point rather than pointer
   ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
   reb-re-syntax 'string                            ; No double blacklashes in re-builder 
   recenter-positions '(5 top bottom)               ; Set re-centering positions
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line.
   scroll-margin 10                                 ; Add a margin when scrolling vertically
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil                    ; End a sentence after a dot and a space
   show-trailing-whitespace nil                     ; Display trailing whitespaces
   split-height-threshold nil                       ; Disable vertical window splitting
   split-width-threshold nil                        ; Disable horizontal window splitting
   tab-width 4                                      ; Set width for tabs
   uniquify-buffer-name-style 'forward              ; Uniquify buffer names
   window-combination-resize t                      ; Resize windows proportionally
   x-stretch-cursor t)                              ; Stretch cursor to the glyph width
  (cd "~/")                                         ; Move to the user directory
  (delete-selection-mode 1)                         ; Replace region when inserting text
  (display-time-mode 1)                             ; Enable time in the mode-line
  (fringe-mode 0)                                   ; Disable fringes
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-subword-mode 1)                           ; Iterate through CamelCase words
  (menu-bar-mode 0)                                 ; Disable the menu bar
  (mouse-avoidance-mode 'banish)                    ; Avoid collision of mouse with point
  (put 'downcase-region 'disabled nil)              ; Enable downcase-region
  (put 'upcase-region 'disabled nil)                ; Enable upcase-region
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
#+END_SRC

Enable fullscreen (emacs uber alles).

#+BEGIN_SRC emacs-lisp
(if (eq window-system 'ns)
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC

Garbage-collect on focus-out, Emacs should feel snappier.

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

Since this lisp is autogenerated, the output is write-only.  We need
customization to live in a different file.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

* Useful additions
Tired of marking scripts executable, or forgetting to do so?  Now you don’t have to!
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)

#+END_SRC
* Packages
There's only one manual step in setting this all up - install -use-package-.

First, let's just make sure use-package works the way we want it to.

#+BEGIN_SRC emacs-lisp
  (setq-default use-package-always-ensure t)
  (require 'use-package)
#+END_SRC
** Helper packages
General is an easier way to do keybindings.
#+BEGIN_SRC emacs-lisp
  (use-package general)
#+END_SRC
** Minibuffer customization
Although helm is nice, I prefer the lighter ivy style.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ""
    :config (ivy-mode))
#+END_SRC

** Movement

Avy for quick jumping & buffer navigation is great.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :general
    (:prefix "C-c j"
             "" '(nil :which-key "Jumps")
             "j" 'avy-goto-word-1
             "l" 'avy-goto-line
             "c" 'avy-goto-char))
#+END_SRC

Multiple cursors is fun and provides quick feedback, allowing for visual
inspection of the result as you change it.  phi-search is useful for this.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :general
    (:prefix "C-c m"
             "" '(nil :which-key "Multiple cursors")
             ">" 'mc/mark-next-like-this
             "<" 'mc/mark-previous-like-this
             "a" 'mc/mark-all-like-this
             "m" 'mc/mark-all-dwim
             "d" 'mc/mark-all-like-this-in-defun
             "n" 'mc/mark-next-lines))

  (use-package phi-search
    :bind (("C-s" . phi-search)
           ("C-r" . phi-search-backward)))
#+END_SRC

Expand-region is useful in lots of situations to quickly select expanding or
contracting regions.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :general
    (:prefix "C-c e"
             "" '(nil :which-key "Expand / Contract")
             "e" 'er/expand-region
             "c" 'er/contract-region
             "d" 'er/mark-defun
             "\"" 'er/mark-inside-quotes
             "'" 'er/mark-inside-quotes
             "p" 'er/mark-inside-pairs
             "." 'er/mark-method-call))
#+END_SRC

Swiper sort of combines isearch with occur.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind (("M-s" . swiper)))
#+END_SRC

Hydra is useful for doing lots of things in succession.
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :config
    (require 'org)
    (defhydra hydra-org (org-mode-map "C-;")
      "
  ^Navigation^         ^Inserting^
  ^^^^^^^^^^^^^------------------------------
  _u_: up to parent    _i_: insert heading
  _n_: next heading  
  _j_: jump          
  _L_: prev link
  _l_: next link
  _B_: prev block
  _b_: next block
  _o_: open link
  "
      ("u" org-up-element)
      ("n" org-next-visible-heading)
      ("j" (lambda () (interactive)
             (let ((org-goto-interface 'outline-path-completionp)
                   (org-outline-path-complete-in-steps nil))
               (org-goto))))
      ("l" org-next-link)
      ("L" org-previous-link)
      ("b" org-next-block)
      ("B" org-prev-block)
      ("o" org-open-at-point)
      ("i" org-insert-heading-respect-content)))
#+END_SRC
** Expansion
yassnippet is a great way to create templates and use them.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
    (setq-default yas-snippet-dirs `(,(expand-file-name "snippets/" user-emacs-directory)))
    (yas-reload-all)
    (yas-global-mode 1))
#+END_SRC

** Programming
Magit is essential for git users.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :general
    (:prefix "C-c s"
             "" '(nil :which-key "Source code")
             "m" 'magit-status))
#+END_SRC
There’s a lot of really good  editing tools. Smartparens is fairly universal, so it’s nice.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :diminish ""
    :init (add-hook 'prog-mode-hook #'smartparens-strict-mode)
    :general
    (:prefix "C-c p"
             "" '(nil :which-key "Parens")
             "i" 'sp-change-inner
             "k" 'sp-kill-sexp
             "b" 'sp-beginning-of-sexp
             "e" 'sp-end-of-sexp
             "d" 'sp-down-sexp
             "u" 'sp-up-sexp
             "]" 'sp-slurp-hybrid-sexp
             "/" 'sp-swap-enclusing-sexp
             "r" 'sp-rewrap-sexp)
    :config (require 'smartparens-config))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config (global-aggressive-indent-mode))
#+END_SRC

Git gutter highlights changes to files.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 't)
    :diminish git-gutter-mode)
#+END_SRC

Flycheck will help check for all errors.  Taken from https://jamiecollinson.com/blog/my-emacs-config/#syntax-checking.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
      (add-hook 'after-init-hook 'global-flycheck-mode)
      (setq-default flycheck-highlighting-mode 'lines)
      ;; Define fringe indicator / warning levels
      (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
        (vector #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00011100
                #b00111110
                #b00111110
                #b00111110
                #b00011100
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000))
      (flycheck-define-error-level 'error
        :severity 2
        :overlay-category 'flycheck-error-overlay
        :fringe-bitmap 'flycheck-fringe-bitmap-ball
        :fringe-face 'flycheck-fringe-error)
      (flycheck-define-error-level 'warning
        :severity 1
        :overlay-category 'flycheck-warning-overlay
        :fringe-bitmap 'flycheck-fringe-bitmap-ball
        :fringe-face 'flycheck-fringe-warning)
      (flycheck-define-error-level 'info
        :severity 0
        :overlay-category 'flycheck-info-overlay
        :fringe-bitmap 'flycheck-fringe-bitmap-ball
        :fringe-face 'flycheck-fringe-info))
#+END_SRC

Company mode is a standard for symbol completion.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :general ("C-c ." 'company-complete)
    :init (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** Major mode keybindings
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'emacs-lisp-mode-map
   :prefix "C-c C-c"
   "" '(nil :which-key "elisp mode")
   "e b" 'eval-buffer
   "e e" 'eval-expression
   "e d" 'eval-defun
   "i" 'ielm)
#+END_SRC
** Help

Which-key pops up keys in a buffer when you are in the middle of a keystroke.
#+BEGIN_SRC emacs-lisp
    (use-package which-key
      :diminish
      :config (which-key-mode 1))
#+END_SRC

Helpful is a nice replacement that is more comprehensive than normal help.
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-h h" . helpful-at-point)
           ("C-h c" . helpful-command)))
#+END_SRC
** Appearance

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :family "Iosevka" :height 130)
  (set-face-attribute 'fixed-pitch nil :family "Iosevka")
  (set-face-attribute 'variable-pitch nil :family "EtBembo")
  (dolist (hook '(text-mode-hook org-mode-hook))
    (add-hook hook (lambda () (variable-pitch-mode 1))))
  (use-package poet-theme)
#+END_SRC

Make org prettier.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

Use real typographical symbols.  Useful in Org.
#+BEGIN_SRC emacs-lisp
  (use-package typo
    :diminish ""
    :init
    (add-hook 'org-mode-hook #'typo-mode))
#+END_SRC

Also, set up Org buffers to look prettier, see https://lepisma.github.io/2017/10/28/ricing-org-mode/.
#+BEGIN_SRC emacs-lisp
  (setq-default org-startup-indented t
                org-bullets-bullet-list '("①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨") 
                org-ellipsis "  " ;; folding symbol
                org-pretty-entities t
                org-hide-emphasis-markers t
                ;; show actually italicized text instead of /italicized text/
                org-agenda-block-separator ""
                org-fontify-whole-heading-line t
                org-fontify-done-headline t
                org-fontify-quote-and-verse-blocks t)
#+END_SRC

Also, long lines are bad.  I prefer to actually keep shorter lines via auto-fill-mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'auto-fill-mode)
#+END_SRC

Improve the looks of the modeline with Powerline.
#+BEGIN_SRC emacs-lisp
  (use-package powerline
      :config
      (setq powerline-default-separator 'utf-8)
      (powerline-center-theme))
#+END_SRC

Add the ability to use org-mode for D&D
#+BEGIN_SRC emacs-lisp
  (use-package emacs-org-dnd
    :disabled
    :ensure nil
    :load-path "~/src/emacs-org-dnd"
    :config (require 'ox-dnd))
#+END_SRC
