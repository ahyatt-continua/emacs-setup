* Bootstrapping
Let's start by making sure we have MELPA stable, which is a
requirement for a lot that follows.
pp
Code comes from http://melpa.org/#/getting-started.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)
#+END_SRC

We use use-package so before first running, install this with `package-install`.
* Better defaults

Most of this is taken from
https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#bootstrap.

I also prefer a minimal UI.
#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0)                           ; Disable the cursor blinking
  (scroll-bar-mode 0)                             ; Disable the scroll bar
  (tool-bar-mode 0)                               ; Disable the tool bar
  (tooltip-mode 0))                               ; Disable the tooltips
#+END_SRC

Various better variable defaults & other basic defaults, mostly from
the same file.

#+BEGIN_SRC emacs-lisp
(setq-default
 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 auto-window-vscroll nil                          ; Lighten vertical scroll
 compilation-ask-about-save nil                   ; Don't save anything, don't ask
 compilation-save-buffers-predicate '(lambda () nil)
 confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
 cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
 column-number-mode t                             ; Useful to look out for line length limits
 delete-by-moving-to-trash t                      ; Delete files to trash
 display-time-default-load-average nil            ; Don't display load average
 display-time-format "%H:%M"                      ; Format the time string
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Stop using tabs to indent
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 left-margin-width 1 right-margin-width 1         ; Add left and right margins
 mouse-yank-at-point t                            ; Yank at point rather than pointer
 ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
 reb-re-syntax 'string                            ; No double blacklashes in re-builder 
 recenter-positions '(5 top bottom)               ; Set re-centering positions
 scroll-conservatively most-positive-fixnum       ; Always scroll by one line.
 scroll-margin 10                                 ; Add a margin when scrolling vertically
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 sentence-end-double-space nil                    ; End a sentence after a dot and a space
 show-trailing-whitespace nil                     ; Display trailing whitespaces
 split-height-threshold nil                       ; Disable vertical window splitting
 split-width-threshold nil                        ; Disable horizontal window splitting
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 window-combination-resize t                      ; Resize windows proportionally
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width
(cd "~/")                                         ; Move to the user directory
(delete-selection-mode 1)                         ; Replace region when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(fringe-mode 0)                                   ; Disable fringes
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-subword-mode 1)                           ; Iterate through CamelCase words
(menu-bar-mode 0)                                 ; Disable the menu bar
(mouse-avoidance-mode 'banish)                    ; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)              ; Enable downcase-region
(put 'upcase-region 'disabled nil)                ; Enable upcase-region
(set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
#+END_SRC

Enable fullscreen (emacs uber alles).

#+BEGIN_SRC emacs-lisp
(if (eq window-system 'ns)
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC

Garbage-collect on focus-out, Emacs should feel snappier.

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

Since this lisp is autogenerated, the output is write-only.  We need
customization to live in a different file.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

* Useful additions
Tired of marking scripts executable, or forgetting to do so?  Now you don’t have to!
#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+END_SRC
* Packages
There's only one manual step in setting this all up - install -use-package-.

First, let's just make sure use-package works the way we want it to.

#+BEGIN_SRC emacs-lisp
  (setq-default use-package-always-ensure t)
  (require 'use-package)
#+END_SRC
** Helper packages
General is an easier way to do keybindings.
#+BEGIN_SRC emacs-lisp
(use-package general
  :config
  ;; Let's make the top-level key categories here
  (general-create-definer ash/key-def :prefix "C-c"))
#+END_SRC
** Minibuffer customization

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
	   ("C-x C-f" . helm-find-files)
	   ("C-x f" . helm-recentf)
	   ("M-y" . helm-show-kill-ring)
	   ("M-i" . helm-mini)
	   ("C-x b" . helm-buffers-list))
    :config (progn
	      (require 'helm-config)
	      (setq helm-buffers-fuzzy-matching t)
	      (helm-mode 1)))
  (use-package helm-proc)
  (use-package helm-flycheck)
  (use-package helm-notmuch)
  (use-package helm-swoop
    :ensure t
    :bind (("M-m" . helm-swoop)
	   ("M-M" . helm-swoop-back-to-last-point))
    :init
    (bind-key "M-m" 'helm-swoop-from-isearch isearch-mode-map))
  (use-package helm-org-rifle)

  (use-package helm-posframe
    :config
    (helm-posframe-enable)
    (setq helm-posframe-parameters '((internal-border-width . 2) (left-fringe . 3)
				     (right-fringe . 3))
	  helm-posframe-poshandler #'posframe-poshandler-frame-center
	  helm-posframe-width 150)
    (add-hook 'helm-before-initialize-hook (lambda (&rest _) (setq helm-display-function
								   (if (display-graphic-p)
								       #'helm-posframe-display
								     #'helm-default-display-buffer)))))

#+END_SRC

** Movement

Winnum for moving between windows is very convenient
#+BEGIN_SRC emacs-lisp
(use-package winum
  :config (winum-mode 1))
#+END_SRC

Avy for quick jumping & buffer navigation is great.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :config
  (advice-add 'spacemacs/avy-goto-url :after (lambda () (browse-url-at-point)))
  (defun ash/avy-goto-url()
    "Use avy to go to an URL in the buffer."
    (interactive)
    ;; avy-action is a global that sometimes is stuck in a weird state, so we
    ;; have to specifically set it here via :action.
    (avy-jump "https?://" :action 'avy-action-goto))
  (defun ash/avy-open-url ()
    "Use avy to select an URL in the buffer and open it."
    (interactive)
    (save-excursion
      (ash/avy-goto-url)
      (browse-url-at-point))))
#+END_SRC

Counsel is also nice for imenu jumping.
#+BEGIN_SRC emacs-lisp
(use-package counsel)
#+END_SRC

We also want to use ace-link for jumping to various kinds of links:
#+BEGIN_SRC emacs-lisp
(use-package ace-link)
#+END_SRC

Multiple cursors is fun and provides quick feedback, allowing for visual
inspection of the result as you change it.  phi-search is useful for this.  But
it doesn't work on long files, so let's bind it to special-commands.
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :pin melpa
  :general)

(use-package phi-search
  :bind (("M-C-s" . phi-search)
         ("M-C-r" . phi-search-backward)))
#+END_SRC

Expand-region is useful in lots of situations to quickly select expanding or
contracting regions.
#+BEGIN_SRC emacs-lisp
(use-package expand-region)
#+END_SRC

Swiper sort of combines isearch with occur.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind (("M-s" . swiper)))
#+END_SRC

Hydra is useful for doing lots of things in succession.
#+BEGIN_SRC emacs-lisp
;; Before hydra because we use pretty-hydra-define in the hydra confg.
(use-package major-mode-hydra
  :bind
  ("M-o" . major-mode-hydra)
  :config
  (advice-add 'hydra-show-hint :before
              (lambda (&rest _)
                (setq hydra-hint-display-type
                      (if (display-graphic-p)
                          'posframe
                        'lv))))
  ;; Mode maps
  (major-mode-hydra-define org-mode nil ("Movement"
                                         (("u" org-up-element "up")
                                          ("n" org-next-visible-heading "next visible heading")
                                          ("j" (lambda () (interactive)
                                                 (let ((org-goto-interface 'outline-path-completionp)
                                                       (org-outline-path-complete-in-steps nil))
                                                   (org-goto))) "jump")
                                          ("l" org-next-link "next link")
                                          ("L" org-previous-link "previous link")
                                          ("b" org-next-block "next block")
                                          ("B" org-prev-block "previous block"))
                                         "Opening" (("o" org-open-at-point "open at point"))
                                         "Headings" (("i" org-insert-heading-respect-content "insert heading"))))
  (major-mode-hydra-bind emacs-lisp-mode "Eval"
    ("b" eval-buffer "eval buffer")
    (";" eval-expression "eval expression")
    ("d" eval-defun "eval defun")
    ("D" edebug-defun "edebug defun")
    ("e" eval-last-sexp "eval last sexp")
    ("E" edebug-eval-last-sexp "edebug last sexp")
    ("i" ielm "ielm"))
  (major-mode-hydra-bind eshell-mode "Movement"
    ("h" helm-eshell-history :exit t)
    ("p" helm-eshell-prompts :exit t)))

(use-package hydra
  :config
  ;; define everything here

  (pretty-hydra-define hydra-jumps ()
    ("Jump visually"
     (("j" avy-goto-word-1 "to word")
      ("l" avy-goto-line "to line")
      ("c" avy-goto-char "to char")
      ("r" avy-resume "resume"))
     "Jump via minibuffer"
     (("i" counsel-imenu "via imenu"))
     "Jump & go"
     (("u" ash/avy-open-url "open url")
      ("b" counsel-bookmark "open bookmark")
      ("k" counsel-ace-link "open link"))
     "Misc"
     (("=" hydra-all/body "back" :exit t))))
  (pretty-hydra-define hydra-structural ()
    ("Change"
     (("i" sp-change-inner "change inner")
      ("k" sp-kill-sexp "kill sexp")
      ("]" sp-slurp-hybrid-sexp "slurp")
      ("/" sp-swap-enclusing-sexp "swap enclusing"))
     "Movement"
     (("b" sp-beginning-of-sexp "beginning of sexp")
      ("e" sp-end-of-sexp "end of sexp")
      ("d" sp-down-sexp "down sexp")
      ("e" sp-up-sexp "up sexp"))
     "Formatting"
     (("r" sp-rewrap-sexp "rewrap"))
     "Misc"
     (("=" hydra-all/body "back" :exit t))))
  (pretty-hydra-define hydra-multiple-cursors ()
    ("Mark via region"
     (("l" mc/edit-lines "edit lines" :exit t)
      ("s" mc/mark-all-in-region-regexp "mark all in region re" :exit t))
     "Mark"
     (("a" mc/mark-all-like-this "mark all" :exit t)
      ("d" mc/mark-all-dwim "mark dwim" :exit t))
     "Mark incrementally"
     (("n" mc/mark-next-like-this "mark next like this")
      ("N" mc/skip-to-next-like-this "skip to next like this")
      ("M-n" mc/unmark-next-like-this "unmark next like this")
      ("p" mc/mark-previous-like-this "mark previous like this")
      ("P" mc/skip-to-previous-like-this "skip to previous like this")
      ("M-p" mc/unmark-previous-like-this "unmark previous like this")
      ("n" mc/mark-next-lines "mark next lines"))
     "Insert"
     (("0" mc/insert-numbers "insert numbers" :exit t)
      ("A" mc/insert-letters "insert letters" :exit t))
     "Misc"
     (("=" hydra-all/body "back" :exit t))))
  (pretty-hydra-define hydra-expand ()
    ("Expand/Contract"
     (("e" er/expand-region "expand")
      ("c" er/contract-region "contract"))
     "Expand to..."
     (("d" er/mark-defun "defun")
      ("\"" er/mark-inside-quotes "quotes")
      ("'" er/mark-inside-quotes "quotes")
      ("p" er/mark-inside-pairs "pairs")
      ("." er/mark-method-call "call"))
     "Misc"
     (("=" hydra-all/body "back" :exit t))))
  (pretty-hydra-define hydra-flycheck ()
    ("Movement"
     (("n" flymake-goto-next-error "next error")
      ("p" flymake-goto-prev-error "previous error")
      ("d" flymake-goto-diagnostic "diagnostic")
      ("<" flycheck-prev-error "previous flycheck error")
      (">" flycheck-next-error "next flycheck error")
      ("l" flycheck-list-errors "list"))
     "Display"
     (("." flymake-show-diagnostic "show diagnostic")
      ("B" flymake-show-diagnostics-buffer "diagnostics buffers"))
     "Misc"
     (("=" hydra-all/body "back" :exit t))))
  ;; notmuch is too specialized to be set up here, it varies from machine to
  ;; machine. At some point I should break it down into the general &
  ;; specialized parts.
  (defun ash/inbox ()
    (interactive)
    (notmuch-search "tag:inbox" t))
  (pretty-hydra-define hydra-mail ()
    ("Search"
     (("s" notmuch-search "search" :exit t)
      ("h" helm-notmuch "helm search" :exit t))
     "Application"
     (("n" notmuch-hello "notmuch" :exit t)
      ("i" ash/inbox "inbox" :exit t)
      ("c" notmuch-mua-new-mail "compose" :exit t))
     "Misc"
     (("=" hydra-all/body "back" :exit t))))
  (pretty-hydra-define hydra-org-main ()
    ("Misc"
     (("a" org-agenda "agenda")    
      ("r" helm-org-rifle "rifle")
      ("c" org-capture "capture"))
     "Links"
     (("s" org-store-link "store")
      ("p" ash/org-paste-link "paste"))))
  (pretty-hydra-define hydra-helm ()
    ("Applications"
     (("c" helm-calcul-expression "calc" :exit t)
      ("w" helm-man-woman "[wo]man" :exit t)
      ("l" helm-locate "locate" :exit t)
      ("a" helm-apropos "apropos" :exit t))
     "In-Buffer"
     (("i" helm-semantic-or-imenu "imenu" :exit t)
      ("o" helm-occur "occur" :exit t)
      ("M" helm-all-mark-rings "mark rings" :exit t)
      ("s" helm-swoop "swoop" :exit t))
     "Switching Buffers"
     (("m" helm-mini "mini" :exit t)
      ("p" helm-browse-project "project" :exit t))
     "Other"
     (("r" helm-resume "resume" :exit t)
      ("R" helm-register "register" :exit t))))
  (pretty-hydra-define hydra-all
    (:quit-key "q" :title "All" :pre (centaur-tabs-local-mode))
    ("Applications"
     (("m" hydra-mail/body "mail" :exit t)
      ("o" hydra-org-main/body "org" :exit t))
     "Editing"
     (("s" hydra-structural/body  "structural" :exit t)
      ("c" hydra-multiple-cursors/body "multiple cursors" :exit t)
      ("e" hydra-expand/body "expand region" :exit t))
     "Movement"
     (("j" hydra-jumps/body "jumps" :exit t)
      ("E" hydra-flycheck/body "errors" :exit t))
     "Misc"
     (("h" hydra-helm/body "helm" :exit t))
     ))

  (global-set-key (kbd "M-p") 'hydra-all/body)
  (global-set-key (kbd "C-c c") 'hydra-all/body)
  (global-set-key (kbd "s-c") 'hydra-all/body))

#+END_SRC

** Expansion
yassnippet is a great way to create templates and use them.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :config
  (setq-default yas-snippet-dirs `(,(expand-file-name "snippets/" user-emacs-directory)))
  (yas-reload-all)
  (yas-global-mode 1))
#+END_SRC

** Programming
Magit is essential for git users.
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC
There’s a lot of really good  editing tools. Smartparens is fairly universal, so it’s nice.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish ""
  :init (add-hook 'prog-mode-hook #'smartparens-strict-mode)
  :config (require 'smartparens-config))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config (global-aggressive-indent-mode))
#+END_SRC

Git gutter highlights changes to files.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 't)
    :diminish git-gutter-mode)
#+END_SRC

Flycheck will help check for all errors.  Taken from https://jamiecollinson.com/blog/my-emacs-config/#syntax-checking.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
      (add-hook 'after-init-hook 'global-flycheck-mode)
      (setq-default flycheck-highlighting-mode 'lines)
      ;; Define fringe indicator / warning levels
      (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
        (vector #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00011100
                #b00111110
                #b00111110
                #b00111110
                #b00011100
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000))
      (flycheck-define-error-level 'error
        :severity 2
        :overlay-category 'flycheck-error-overlay
        :fringe-bitmap 'flycheck-fringe-bitmap-ball
        :fringe-face 'flycheck-fringe-error)
      (flycheck-define-error-level 'warning
        :severity 1
        :overlay-category 'flycheck-warning-overlay
        :fringe-bitmap 'flycheck-fringe-bitmap-ball
        :fringe-face 'flycheck-fringe-warning)
      (flycheck-define-error-level 'info
        :severity 0
        :overlay-category 'flycheck-info-overlay
        :fringe-bitmap 'flycheck-fringe-bitmap-ball
        :fringe-face 'flycheck-fringe-info))
#+END_SRC

Company mode is a standard for symbol completion.
#+BEGIN_SRC emacs-lisp
(use-package company
  :general ("C-c ." 'company-complete)
  :config
  (setq company-global-modes '(c-mode c++-mode go-mode java-mode))
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-minimum-prefix-length 0))
#+END_SRC

** Help

Which-key pops up keys in a buffer when you are in the middle of a keystroke.
#+BEGIN_SRC emacs-lisp
    (use-package which-key
      :diminish
      :config (which-key-mode 1))
#+END_SRC

Helpful is a nice replacement that is more comprehensive than normal help.
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-h h" . helpful-at-point)
           ("C-h c" . helpful-command)))
#+END_SRC
** Appearance

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Iosevka" :height 130)
(set-face-attribute 'fixed-pitch nil :family "Iosevka")
(set-face-attribute 'variable-pitch nil :family "EtBembo")
(dolist (hook '(text-mode-hook org-mode-hook message-mode-hook notmuch-show-mode-hook))
  (when (boundp hook)
    (add-hook hook (lambda () (variable-pitch-mode 1)))))
;; (use-package poet-theme)
(use-package doom-themes
  :config (load-theme 'doom-city-lights t))

#+END_SRC

Make org prettier.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

Also, set up Org buffers to look prettier, see https://lepisma.github.io/2017/10/28/ricing-org-mode/.
#+BEGIN_SRC emacs-lisp
  (setq-default org-startup-indented t
                org-bullets-bullet-list '("①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨") 
                org-ellipsis "  " ;; folding symbol
                org-pretty-entities t
                org-hide-emphasis-markers t
                ;; show actually italicized text instead of /italicized text/
                org-agenda-block-separator ""
                org-fontify-whole-heading-line t
                org-fontify-done-headline t
                org-fontify-quote-and-verse-blocks t)
#+END_SRC

Also, long lines are bad.  I prefer to actually keep shorter lines via auto-fill-mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'auto-fill-mode)
#+END_SRC
Improve the looks of the modeline with Powerline.
#+BEGIN_SRC emacs-lisp
(use-package spaceline)
(use-package spaceline-all-the-icons 
  :after spaceline
  :config
  (defun ash/flymake-num-severity (severity)
    (count-if (lambda (i) (= (warning-numeric-level severity) (flymake--severity (flymake-diagnostic-type i)))) issues))
  (defun ash/flymake-status ()
    (let* ((issues (flymake-diagnostics))
           (num-note (ash/flymake-num-severity :debug))
           (num-error (ash/flymake-num-severity :error))
           (num-warning (ash/flymake-num-severity :warning))
           (text-and-face (cond ((null issues) `(("✔ No Issues" . (:height ,(spaceline-all-the-icons--height 0.9) :foreground ,(spaceline-all-the-icons--face-foreground 'success)))))
                                (t (list (cons (number-to-string num-error) `(:height ,(spaceline-all-the-icons--height 0.9) :foreground ,(spaceline-all-the-icons--face-foreground 'error)))
                                         (cons (number-to-string num-warning) `(:height ,(spaceline-all-the-icons--height 0.9) :foreground ,(spaceline-all-the-icons--face-foreground 'warning)))
                                         (cons (number-to-string num-note) `(:height ,(spaceline-all-the-icons--height 0.9) :foreground ,(spaceline-all-the-icons--face-foreground 'warning))))))))
      (mapconcat (lambda (c) (propertize (car c) 'face (cdr c) 'display '(raise 0.1))) text-and-face "|")))
  (spaceline-define-segment ash/flymake-segment
    (ash/flymake-status))
  (spaceline-all-the-icons-theme 'ash/flymake-segment))
#+END_SRC

Add the ability to use org-mode for D&D
#+BEGIN_SRC emacs-lisp
  (use-package emacs-org-dnd
    :disabled
    :ensure nil
    :load-path "~/src/emacs-org-dnd"
    :config (require 'ox-dnd))
#+END_SRC

Centaur mode is a nice looking way to see buffers as tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :demand
  :config
  (centaur-tabs-mode t)
  (centaur-tabs-headline-match)
  (setq centaur-tabs-set-modified-marker t
        centaur-tabs-modified-marker "●"
        centaur-tabs-cycle-scope 'tabs
        centaur-tabs-height 30
        centaur-tabs-set-icons t)
  :bind
  ("C-TAB" . centaur-tabs-forward)
  ("C-M-TAB" . centaur-tabs-backward)
  ("C-c TAB" . centaur-tabs-forward-group))
#+end_src

Treemacs offers tree-based navigation.  Is it actually useful for me?  Not sure yet.
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (treemacs--find-python3))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+end_src

* Org config
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :config
  (require 'org-checklist)
  :general
  ("C-c a" 'org-agenda))

(require 'org-tempo)

(add-hook 'org-babel-after-execute-hook
          (lambda ()
            (when org-inline-image-overlays
              (org-redisplay-inline-images))))
(add-hook 'org-mode-hook
      (lambda ()
        (auto-fill-mode)
        (variable-pitch-mode 1)))
(setq org-clock-string-limit 80
      org-log-done t
      org-agenda-span 'day
      org-agenda-include-diary t
      org-deadline-warning-days 1
      org-clock-idle-time 10
      org-agenda-sticky t
      org-agenda-start-with-log-mode nil
      org-todo-keywords '((sequence "TODO(t)" "STARTED(s)"
                                    "WAITING(w@/!)" "|" "DONE(d)"
                                    "OBSOLETE(o)")
                          (type "PERMANENT")
                          (sequence "REVIEW(r)" "SEND(e)" "EXTREVIEW(g)" "RESPOND(p)" "SUBMIT(u)" "CLEANUP(c)"
                                    "|" "SUBMITTED(b)"))
      org-agenda-custom-commands
      '(("w" todo "WAITING" nil)
        ("n" tags-todo "+someday"
         ((org-show-hierarchy-above nil) (org-agenda-todo-ignore-with-date t)
          (org-agenda-tags-todo-honor-ignore-options t)))
        ("0" "Critical tasks" ((agenda "") (tags-todo "+p0")))
        ("l" "Agenda and live tasks" ((agenda)
                                      (todo "PERMANENT")
                                      (todo "WAITING|EXTREVIEW")
                                      (tags-todo "-someday/!-WAITING-EXTREVIEW")))
        ("S" "Last week's snippets" tags "TODO=\"DONE\"+CLOSED>=\"<-1w>\""
         ((org-agenda-overriding-header "Last week's completed TODO: ")
          (org-agenda-skip-archived-trees nil)
          (org-agenda-files '("~/org/work.org" "~/org/journal.org")))))
      org-agenda-files '("~/org/work.org" "~/org/journal.org")
      org-enforce-todo-dependencies t
      org-agenda-todo-ignore-scheduled t
      org-agenda-dim-blocked-tasks 'invisible
      org-agenda-tags-todo-honor-ignore-options t
      org-agenda-skip-deadline-if-done 't
      org-agenda-skip-scheduled-if-done 't
      org-src-window-setup 'other-window
      org-src-tab-acts-natively t
      org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-edit-src-content-indentation 0
      org-fontify-quote-and-verse-blocks t
      org-hide-emphasis-markers t
      org-use-sub-superscripts "{}"
      org-startup-with-inline-images t
      org-agenda-prefix-format '((agenda . " %i %-18:c%?-12t% s")
                                 (timeline . "  % s")
                                 (todo . " %i %-18:c")
                                 (tags . " %i %-18:c")
                                 (search . " %i %-18:c"))
      org-modules '(org-bbdb org-docview org-info org-jsinfo org-wl org-habit org-gnus org-habit org-inlinetask)
      org-drawers '("PROPERTIES" "CLOCK" "LOGBOOK" "NOTES")
      org-clock-into-drawer nil
      org-clock-report-include-clocking-task t
      org-clock-history-length 20
      org-archive-location "~/org/journal.org::datetree/* Archived"
      org-use-property-inheritance t
      org-link-abbrev-alist '(("CL" . "http://cl/%s") ("BUG" . "http://b/%s"))
      org-agenda-clockreport-parameter-plist
      '(:maxlevel 2 :link nil :scope ("~/org/work.org"))
      org-refile-targets '((nil :maxlevel . 5))
      org-use-speed-commands t
      org-refile-targets '((nil . (:maxlevel . 3)))
      org-link-frame-setup '((gnus . gnus)
                             (file . find-file-other-window))
      org-speed-commands-user '(("w" . ash-org-start-work))
      org-completion-use-ido t
      org-use-fast-todo-selection t
      org-habit-show-habits t
      org-capture-templates
      '(("n" "Note" entry
         (file+headline "notes.org" "Unfiled notes")
         "* %a%?\n%u\n%i")
        ("j" "Journal" entry
         (file+datetree "journal.org")
         "* %T %?")
        ("t" "Todo" entry
         (file+headline "work.org" "Inbox")
         "* TODO %?\n%a")
        ("a" "Act on email" entry
         (file+headline "work.org" "Inbox")
         "* TODO %?, Link: %a")))

(org-babel-do-load-languages 'org-babel-load-languages '((shell . t)))
#+END_SRC
* Tangling-related

We need to add some functions to make dealing with this file easier.

This part is partially taken from
https://jamiecollinson.com/blog/my-emacs-config/#make-it-easy-to-edit-this-file.

#+BEGIN_SRC emacs-lisp
  (defun ash/tangle-config ()
    "Tangle the config file to a standard config file."
    (interactive)
    (org-babel-tangle 0 "~/.emacs.d/init.el"))

  (general-define-key :keymaps 'org-mode-map
		      :predicate '(string-equal "emacs.org" (buffer-name))
		      "C-c t" 'ash/tangle-config)

  (defun ash/find-config ()
    "Edit config.org"
    (interactive)
    (find-file "~/.emacs.d/emacs.org"))
#+END_SRC

